[project]
name = "gunn"
version = "0.1.0"
description = "gunn (群) provides a controlled interface for agent–environment interaction, supporting both single and multi-agent settings"
readme = "README.md"
authors = [{ name = "ksterx", email = "kostonerx@gmail.com" }]
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.0.0",
    "orjson>=3.9.0",
    "jsonpatch>=1.33",
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "fastapi>=0.104.0",
    "websockets>=12.0",
    "aiosqlite>=0.19.0",
    "rich>=14.1.0",
    "typer>=0.19.2",
    "httpx>=0.28.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.5.0",
    "types-pyyaml>=6.0.12.20250915",
    "pyyaml>=6.0",
]

[project.scripts]
gunn = "gunn.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gunn"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/schemas",
    "/docs",
]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Less strict for test files
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "gunn.utils.test_hashing_integration",
    "gunn.utils.test_hashing",
    "gunn.utils.hashing_demo",
    "gunn.core.test_event_log",
    "gunn.core.test_orchestrator",
    "gunn.core.test_orchestrator_integration",
    "gunn.utils.test_telemetry",
    "gunn.policies.test_observation",
    "gunn.policies.test_observation_integration"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "gunn.utils.test_timing"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "gunn.utils.test_timing_integration"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "gunn.utils.timing_demo"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "gunn.utils.test_hashing"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "gunn.utils.test_hashing_integration"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "gunn.utils.hashing_demo"
disallow_untyped_defs = false
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests", "src"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pyyaml>=6.0.3",
    "types-pyyaml>=6.0.12.20250915",
]
